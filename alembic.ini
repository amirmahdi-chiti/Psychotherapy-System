# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# logging configuration
# logging.config = config://alembic_logging

# sys.path path, overrides pythonpath, a comma-separated list
# prepend_sys_path =

# timezone to use when rendering the date within the migration file as
# well as the filename.
# If specified, requires the python-dateutil library be present.
# legal values are:
# `utc` - render with UTC timezone
# `local` - render with local timezone
# `utc:ZONE` - render with `ZONE` as the timezone.
# Example: `utc:America/Los_Angeles`
# timezone = utc

[alembic:environment]
# default environment. this value is passed to the EnvironmentContext
# environment argument if not specified explicitly on the command line
# environment = production

[alembic:exclude]
# When autogenerating migration scripts, Alembic will avoid including
# objects that match names specified here.
# comma-separated list of object names.
# object_names =

[alembic:migration]
# only add migration scripts that include the following regex.
# migration_modules =

# timezone to use when rendering the date within the migration file as
# well as the filename.
# If specified, requires the python-dateutil library be present.
# legal values are:
# `utc` - render with UTC timezone
# `local` - render with local timezone
# `utc:ZONE` - render with `ZONE` as the timezone.
# Example: `utc:America/Los_Angeles`
# timezone = utc

# options for the alembic.migration MigrationScript directive
# arguments =

# environment tokens, included in the name of the environment
# environment_tokens =

[alembic:branches]
# branch name config - a dictionary of branch names and their
# matching environment token.

[alembic:compare_type]
# when autogenerating migration scripts, generate a comparison
# that is aware of type changes
# compare_type = true

[alembic:compare_server_default]
# when autogenerating migration scripts, generate a comparison
# that is aware of changes in server default values
# compare_server_default = true

[alembic:compare_nullable]
# when autogenerating migration scripts, generate a comparison
# that is aware of changes in nullability
# compare_nullable = true

[alembic:compare_index]
# when autogenerating migration scripts, generate a comparison
# that is aware of changes in indexes
# compare_index = true

[alembic:compare_primary_key]
# when autogenerating migration scripts, generate a comparison
# that is aware of changes in primary key constraints
# compare_primary_key = true

# add your model's MetaData object here for 'autogenerate' support
# from myapp.mymodel import Base
# target_metadata = Base.metadata

# set sqlalchemy.url value as per your database connection string
sqlalchemy.url = postgresql+asyncpg://postgres:changeme@localhost/Psychotherapy

# Logging
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = INFO
handlers = console
qualname = sqlalchemy.engine
propagate = 0

[logger_alembic]
level = INFO
handlers = console
qualname = alembic
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
